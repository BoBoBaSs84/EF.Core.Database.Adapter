// <auto-generated />
using System;
using Database.Adapter.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Adapter.Infrastructure.Migrations.MasterData
{
    [DbContext(typeof(MasterDataContext))]
    [Migration("20230108180620_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("private")
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Adapter.Entities.MasterData.CalendarDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Day")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(day,[Date]))", true);

                    b.Property<int>("DayOfYear")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(dayofyear,[Date]))", true);

                    b.Property<int>("DayTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOfMonth")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("(eomonth([Date]))", true);

                    b.Property<int>("IsoWeek")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(iso_week,[Date]))", true);

                    b.Property<int>("Month")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(month,[Date]))", true);

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(datename(month,[Date]))", false);

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Week")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(week,[Date]))", false);

                    b.Property<int>("WeekDay")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(weekday,[Date]))", false);

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("(datename(weekday,[Date]))", false);

                    b.Property<int>("Year")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(year,[Date]))", true);

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Date")
                        .IsUnique();

                    b.HasIndex("DayTypeId");

                    b.HasIndex("Year");

                    b.ToTable("CalendarDay", "private");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("CalendarDay", "history");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Database.Adapter.Entities.MasterData.DayType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DayType", "enumerator");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("DayType", "history");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A weekday day means any day except any Saturday, any Sunday, or any day which is a legal holiday.",
                            IsActive = true,
                            Name = "Weekday"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Generally refers to the period between the end of a usual work week and the beginning of the new work week.",
                            IsActive = true,
                            Name = "Weekend day"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Day on which professional work is performed or is to be performed.",
                            IsActive = true,
                            Name = "Workday"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Weekend work means working on days that are usually non-working days.",
                            IsActive = true,
                            Name = "Weekend workday"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Is an authorised prolonged absence from work, for any reason authorised by the workplace.",
                            IsActive = true,
                            Name = "Absence"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Business travel is travel undertaken for work or business purposes, as opposed to other types of travel, such as for leisure purposes.",
                            IsActive = true,
                            Name = "Buisness trip"
                        },
                        new
                        {
                            Id = 7,
                            Description = "In the case of a suspension, the employee is permanently or temporarily released from his or her contractual work duties.",
                            IsActive = true,
                            Name = "Suspension"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A holiday is a day set aside by custom or by law on which normal activities, especially business or work including school, are suspended or reduced.",
                            IsActive = true,
                            Name = "Holiday"
                        },
                        new
                        {
                            Id = 9,
                            Description = "The place of work is usually in the employee's own home, and in the case of mobile work also in third locations.",
                            IsActive = true,
                            Name = "Mobile working"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Is either the plan to leave of absence from a regular job or an instance of leisure travel away from home.",
                            IsActive = true,
                            Name = "Planned vacation"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Short-time work in the employment relationship means the temporary reduction of regular working hours in a company due to a significant loss of work.",
                            IsActive = true,
                            Name = "Short time work"
                        },
                        new
                        {
                            Id = 12,
                            Description = "The employee can no longer perform his or her most recently performed work tasks due to illness or can only do so at the risk of aggravating the illness.",
                            IsActive = true,
                            Name = "Sickness"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Is either a leave of absence from a regular job or an instance of leisure travel away from home.",
                            IsActive = true,
                            Name = "Vacation"
                        },
                        new
                        {
                            Id = 14,
                            Description = "With the vacation block, employers prohibit their employees from taking vacation during a certain period of time.",
                            IsActive = true,
                            Name = "Vacation block"
                        });
                });

            modelBuilder.Entity("Database.Adapter.Entities.MasterData.CalendarDay", b =>
                {
                    b.HasOne("Database.Adapter.Entities.MasterData.DayType", "DayType")
                        .WithMany("CalendarDays")
                        .HasForeignKey("DayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayType");
                });

            modelBuilder.Entity("Database.Adapter.Entities.MasterData.DayType", b =>
                {
                    b.Navigation("CalendarDays");
                });
#pragma warning restore 612, 618
        }
    }
}
